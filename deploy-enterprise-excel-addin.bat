@echo off
REM ============================================================================
REM Excel-Ollama AI Plugin - ENTERPRISE DEPLOYMENT SCRIPT
REM Automatically creates and installs the Enterprise Excel Add-in (.xlam)
REM Handles millions of records with intelligent processing strategies
REM ============================================================================

setlocal enabledelayedexpansion
color 0A

echo.
echo ========================================================================
echo    EXCEL-OLLAMA AI PLUGIN - ENTERPRISE DEPLOYMENT
echo ========================================================================
echo.
echo 🚀 ENTERPRISE FEATURES:
echo    ✅ Handles millions of records safely
echo    ✅ Intelligent sampling algorithms  
echo    ✅ Memory-efficient processing
echo    ✅ Statistical analysis on massive datasets
echo    ✅ Chunked processing for extreme scale
echo.
echo 📊 PROCESSING STRATEGIES:
echo    • ^< 100 rows: Full analysis
echo    • ^< 1K rows: Intelligent sampling
echo    • ^< 100K rows: Statistical analysis
echo    • ^> 100K rows: Chunked processing
echo.
echo ========================================================================
echo.

REM Check if running as administrator
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo ⚠️  WARNING: Not running as Administrator
    echo    Some operations may require elevated privileges
    echo.
    pause
)

REM Check if Excel is running
tasklist /FI "IMAGENAME eq EXCEL.EXE" 2>NUL | find /I /N "EXCEL.EXE">NUL
if "%ERRORLEVEL%"=="0" (
    echo ⚠️  WARNING: Excel is currently running
    echo    Please close Excel before continuing to avoid conflicts
    echo.
    choice /C YN /M "Continue anyway? (Y/N)"
    if errorlevel 2 goto :EOF
    echo.
)

REM Set variables
set "SCRIPT_DIR=%~dp0"
set "VBA_FILE=%SCRIPT_DIR%enterprise-excel-addin.vba"
set "ADDIN_NAME=OllamaAI_Enterprise"
set "XLAM_FILE=%SCRIPT_DIR%%ADDIN_NAME%.xlam"
set "TEMP_XLSM=%SCRIPT_DIR%temp_addin.xlsm"

REM Check if VBA file exists
if not exist "%VBA_FILE%" (
    echo ❌ ERROR: enterprise-excel-addin.vba not found!
    echo.
    echo Expected location: %VBA_FILE%
    echo.
    echo Please ensure the VBA file is in the same directory as this batch file.
    pause
    goto :EOF
)

echo 📁 Files and Directories:
echo    Script Directory: %SCRIPT_DIR%
echo    VBA Source File: %VBA_FILE%
echo    Target Add-in: %XLAM_FILE%
echo.

REM Get user's Excel Add-ins directory
for /f "tokens=3*" %%a in ('reg query "HKCU\Software\Microsoft\Office\16.0\Excel\Options" /v "OPEN" 2^>nul') do set "EXCEL_ADDINS=%%a %%b"
if "%EXCEL_ADDINS%"==" " (
    for /f "tokens=3*" %%a in ('reg query "HKCU\Software\Microsoft\Office\15.0\Excel\Options" /v "OPEN" 2^>nul') do set "EXCEL_ADDINS=%%a %%b"
)
if "%EXCEL_ADDINS%"==" " (
    set "EXCEL_ADDINS=%APPDATA%\Microsoft\AddIns"
)

echo 📂 Excel Add-ins Directory: %EXCEL_ADDINS%
echo.

REM Create Excel Add-ins directory if it doesn't exist
if not exist "%EXCEL_ADDINS%" (
    echo 📁 Creating Excel Add-ins directory...
    mkdir "%EXCEL_ADDINS%" 2>nul
    if !errorlevel! neq 0 (
        echo ❌ ERROR: Could not create Add-ins directory
        pause
        goto :EOF
    )
    echo ✅ Directory created successfully
    echo.
)

echo ========================================================================
echo                           DEPLOYMENT STEPS
echo ========================================================================
echo.

REM Step 1: Create PowerShell script to build the add-in
echo 🔧 Step 1: Creating PowerShell deployment script...

set "PS_SCRIPT=%SCRIPT_DIR%create_enterprise_addin.ps1"

(
echo # PowerShell script to create Enterprise Excel Add-in
echo # Generated by deploy-enterprise-excel-addin.bat
echo.
echo Write-Host "🚀 Creating Enterprise Excel Add-in..." -ForegroundColor Green
echo.
echo try {
echo     # Start Excel application
echo     $excel = New-Object -ComObject Excel.Application
echo     $excel.Visible = $false
echo     $excel.DisplayAlerts = $false
echo.
echo     Write-Host "📊 Excel application started" -ForegroundColor Yellow
echo.
echo     # Create new workbook
echo     $workbook = $excel.Workbooks.Add^(^)
echo     Write-Host "📋 New workbook created" -ForegroundColor Yellow
echo.
echo     # Access VBA project
echo     $vbaProject = $workbook.VBProject
echo.
echo     # Read VBA code from file
echo     $vbaCode = Get-Content -Path "%VBA_FILE%" -Raw -Encoding UTF8
echo     Write-Host "📄 VBA code loaded from file" -ForegroundColor Yellow
echo.
echo     # Add VBA module
echo     $module = $vbaProject.VBComponents.Add^(1^)  # 1 = vbext_ct_StdModule
echo     $module.Name = "OllamaAI_Enterprise"
echo     $module.CodeModule.AddFromString^($vbaCode^)
echo     Write-Host "🔧 VBA module added to workbook" -ForegroundColor Yellow
echo.
echo     # Set workbook properties
echo     $workbook.Title = "Ollama AI Enterprise Plugin"
echo     $workbook.Subject = "AI-powered data analysis for Excel - Enterprise Edition"
echo     $workbook.Comments = "Handles millions of records with intelligent processing strategies"
echo.
echo     # Save as Excel Add-in ^(.xlam^)
echo     $workbook.SaveAs^("%XLAM_FILE%", 55^)  # 55 = xlAddIn8
echo     Write-Host "💾 Add-in saved as: %XLAM_FILE%" -ForegroundColor Green
echo.
echo     # Close workbook and Excel
echo     $workbook.Close^($false^)
echo     $excel.Quit^(^)
echo.
echo     # Release COM objects
echo     [System.Runtime.Interopservices.Marshal]::ReleaseComObject^($workbook^) ^| Out-Null
echo     [System.Runtime.Interopservices.Marshal]::ReleaseComObject^($excel^) ^| Out-Null
echo     [System.GC]::Collect^(^)
echo     [System.GC]::WaitForPendingFinalizers^(^)
echo.
echo     Write-Host "✅ Enterprise Excel Add-in created successfully!" -ForegroundColor Green
echo     Write-Host "📁 Location: %XLAM_FILE%" -ForegroundColor Cyan
echo.
echo } catch {
echo     Write-Host "❌ ERROR: $_" -ForegroundColor Red
echo     if ^($excel^) {
echo         try { $excel.Quit^(^) } catch { }
echo     }
echo     exit 1
echo }
) > "%PS_SCRIPT%"

echo ✅ PowerShell script created
echo.

REM Step 2: Execute PowerShell script
echo 🔧 Step 2: Executing PowerShell script to create add-in...
echo.

powershell -ExecutionPolicy Bypass -File "%PS_SCRIPT%"

if %errorlevel% neq 0 (
    echo.
    echo ❌ ERROR: PowerShell script failed
    echo.
    echo 🔧 TROUBLESHOOTING:
    echo    1. Ensure Excel is installed
    echo    2. Check if VBA/Macros are enabled
    echo    3. Try running as Administrator
    echo    4. Temporarily disable antivirus
    echo.
    pause
    goto :cleanup
)

REM Step 3: Verify add-in was created
echo.
echo 🔧 Step 3: Verifying add-in creation...

if not exist "%XLAM_FILE%" (
    echo ❌ ERROR: Add-in file was not created
    echo Expected: %XLAM_FILE%
    echo.
    pause
    goto :cleanup
)

echo ✅ Add-in file created successfully
echo    📁 Size: 
for %%A in ("%XLAM_FILE%") do echo       %%~zA bytes
echo.

REM Step 4: Copy to Excel Add-ins directory
echo 🔧 Step 4: Installing add-in to Excel Add-ins directory...

set "INSTALLED_ADDIN=%EXCEL_ADDINS%\%ADDIN_NAME%.xlam"

copy "%XLAM_FILE%" "%INSTALLED_ADDIN%" >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ ERROR: Could not copy add-in to Excel directory
    echo Source: %XLAM_FILE%
    echo Target: %INSTALLED_ADDIN%
    echo.
    echo You can manually copy the file later.
    pause
) else (
    echo ✅ Add-in installed to Excel Add-ins directory
    echo    📁 Location: %INSTALLED_ADDIN%
    echo.
)

REM Step 5: Create configuration helper
echo 🔧 Step 5: Creating configuration helper...

set "CONFIG_BAT=%SCRIPT_DIR%configure-enterprise-addin.bat"

(
echo @echo off
echo REM Configuration helper for Enterprise Excel Add-in
echo.
echo echo ========================================================================
echo echo                    ENTERPRISE EXCEL ADD-IN CONFIGURATION
echo echo ========================================================================
echo echo.
echo echo 🔧 QUICK SETUP STEPS:
echo echo.
echo echo 1. ENABLE THE ADD-IN IN EXCEL:
echo echo    • Open Excel
echo echo    • Go to File ^> Options ^> Add-ins
echo echo    • At bottom, select "Excel Add-ins" and click "Go..."
echo echo    • Check "OllamaAI_Enterprise" and click OK
echo echo.
echo echo 2. CONFIGURE YOUR OLLAMA SERVER:
echo echo    • In Excel, press Alt+F11 to open VBA Editor
echo echo    • Or run: ConfigureOllamaServer^(^) in Excel
echo echo    • Enter your EC2 server IP: http://YOUR-EC2-IP:11434
echo echo.
echo echo 3. TEST THE CONNECTION:
echo echo    • Run: TestConnection^(^) in Excel
echo echo    • Should show "✅ Connection successful!"
echo echo.
echo echo 4. TEST WITH SAMPLE DATA:
echo echo    • Run: TestWithSampleData^(^) in Excel
echo echo    • Verify AI responses work correctly
echo echo.
echo echo 5. ANALYZE YOUR DATA:
echo echo    • Select your data range ^(including headers^)
echo echo    • Run: AnalyzeSelectedDataEnterprise^(^)
echo echo    • Or run: AskQuestionAboutDataEnterprise^(^)
echo echo.
echo echo ========================================================================
echo echo                           ENTERPRISE FUNCTIONS
echo echo ========================================================================
echo echo.
echo echo 📊 MAIN FUNCTIONS:
echo echo    • AnalyzeSelectedDataEnterprise^(^)    - Smart analysis for any size
echo echo    • AskQuestionAboutDataEnterprise^(^)   - Intelligent Q^&A
echo echo    • GenerateStatisticalSummary^(^)       - Fast stats on millions
echo echo    • TestConnection^(^)                   - Verify server connection
echo echo    • TestWithSampleData^(^)               - Test functionality
echo echo    • ConfigureOllamaServer^(^)            - Set server settings
echo echo    • ShowEnterpriseHelp^(^)               - Show detailed help
echo echo.
echo echo 🚀 PROCESSING STRATEGIES:
echo echo    • ^< 100 rows: Full analysis ^(5-10 seconds^)
echo echo    • ^< 1K rows: Intelligent sampling ^(10-15 seconds^)
echo echo    • ^< 100K rows: Statistical analysis ^(30-60 seconds^)
echo echo    • ^> 100K rows: Chunked processing ^(1-3 minutes^)
echo echo.
echo echo 💡 PERFORMANCE TIPS:
echo echo    • Start with GenerateStatisticalSummary for large datasets
echo echo    • Select only necessary columns
echo echo    • Ensure 8GB+ RAM for best performance
echo echo    • Close other applications during processing
echo echo.
echo echo ========================================================================
echo echo.
echo pause
) > "%CONFIG_BAT%"

echo ✅ Configuration helper created: %CONFIG_BAT%
echo.

REM Step 6: Create uninstall script
echo 🔧 Step 6: Creating uninstall script...

set "UNINSTALL_BAT=%SCRIPT_DIR%uninstall-enterprise-addin.bat"

(
echo @echo off
echo REM Uninstall script for Enterprise Excel Add-in
echo.
echo echo ========================================================================
echo echo                    UNINSTALL ENTERPRISE EXCEL ADD-IN
echo echo ========================================================================
echo echo.
echo choice /C YN /M "Are you sure you want to uninstall the Enterprise Excel Add-in? (Y/N)"
echo if errorlevel 2 goto :EOF
echo.
echo echo 🗑️  Removing add-in files...
echo.
echo if exist "%XLAM_FILE%" (
echo     del "%XLAM_FILE%" ^>nul 2^>^&1
echo     if !errorlevel! equ 0 (
echo         echo ✅ Removed: %XLAM_FILE%
echo     ^) else (
echo         echo ❌ Could not remove: %XLAM_FILE%
echo     ^)
echo ^)
echo.
echo if exist "%INSTALLED_ADDIN%" (
echo     del "%INSTALLED_ADDIN%" ^>nul 2^>^&1
echo     if !errorlevel! equ 0 (
echo         echo ✅ Removed: %INSTALLED_ADDIN%
echo     ^) else (
echo         echo ❌ Could not remove: %INSTALLED_ADDIN%
echo     ^)
echo ^)
echo.
echo echo 📋 MANUAL STEPS REQUIRED:
echo echo    1. Open Excel
echo echo    2. Go to File ^> Options ^> Add-ins
echo echo    3. Select "Excel Add-ins" and click "Go..."
echo echo    4. Uncheck "OllamaAI_Enterprise" and click OK
echo echo.
echo echo ✅ Uninstall completed
echo pause
) > "%UNINSTALL_BAT%"

echo ✅ Uninstall script created: %UNINSTALL_BAT%
echo.

REM Success message
echo ========================================================================
echo                           DEPLOYMENT COMPLETED!
echo ========================================================================
echo.
echo ✅ ENTERPRISE EXCEL ADD-IN SUCCESSFULLY DEPLOYED!
echo.
echo 📁 FILES CREATED:
echo    • Add-in file: %XLAM_FILE%
echo    • Installed to: %INSTALLED_ADDIN%
echo    • Configuration helper: %CONFIG_BAT%
echo    • Uninstall script: %UNINSTALL_BAT%
echo.
echo 🚀 ENTERPRISE FEATURES AVAILABLE:
echo    ✅ Handles millions of records safely
echo    ✅ Intelligent sampling algorithms
echo    ✅ Memory-efficient processing  
echo    ✅ Statistical analysis on massive datasets
echo    ✅ Chunked processing for extreme scale
echo.
echo 📊 PROCESSING STRATEGIES:
echo    • ^< 100 rows: Full analysis (5-10 seconds)
echo    • ^< 1K rows: Intelligent sampling (10-15 seconds)
echo    • ^< 100K rows: Statistical analysis (30-60 seconds)
echo    • ^> 100K rows: Chunked processing (1-3 minutes)
echo.
echo 🔧 NEXT STEPS:
echo    1. Run: %CONFIG_BAT%
echo    2. Follow the configuration instructions
echo    3. Enable the add-in in Excel
echo    4. Configure your Ollama server
echo    5. Test with sample data
echo    6. Analyze your enterprise datasets!
echo.
echo 💡 QUICK START:
echo    • Open Excel
echo    • Press Alt+F8, type: ConfigureOllamaServer
echo    • Enter your EC2 IP: http://your-ec2-ip:11434
echo    • Press Alt+F8, type: TestConnection
echo    • Press Alt+F8, type: ShowEnterpriseHelp
echo.
echo ========================================================================

:cleanup
REM Clean up temporary files
if exist "%PS_SCRIPT%" del "%PS_SCRIPT%" >nul 2>&1
if exist "%TEMP_XLSM%" del "%TEMP_XLSM%" >nul 2>&1

echo.
echo Press any key to open configuration helper...
pause >nul

REM Open configuration helper
if exist "%CONFIG_BAT%" (
    start "" "%CONFIG_BAT%"
)

echo.
echo Deployment script completed.
echo.
pause