@echo off
REM ============================================================================
REM Excel-Ollama AI Plugin - ENTERPRISE DEPLOYMENT SCRIPT (FIXED)
REM Automatically creates and installs the Enterprise Excel Add-in (.xlam)
REM Handles millions of records with intelligent processing strategies
REM ============================================================================

setlocal enabledelayedexpansion
color 0A

echo.
echo ========================================================================
echo    EXCEL-OLLAMA AI PLUGIN - ENTERPRISE DEPLOYMENT (FIXED)
echo ========================================================================
echo.
echo ENTERPRISE FEATURES:
echo    - Handles millions of records safely
echo    - Intelligent sampling algorithms  
echo    - Memory-efficient processing
echo    - Statistical analysis on massive datasets
echo    - Chunked processing for extreme scale
echo.
echo PROCESSING STRATEGIES:
echo    - ^< 100 rows: Full analysis
echo    - ^< 1K rows: Intelligent sampling
echo    - ^< 100K rows: Statistical analysis
echo    - ^> 100K rows: Chunked processing
echo.
echo ========================================================================
echo.

REM Check if running as administrator
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo WARNING: Not running as Administrator
    echo Some operations may require elevated privileges
    echo.
    pause
)

REM Check if Excel is running
tasklist /FI "IMAGENAME eq EXCEL.EXE" 2>NUL | find /I /N "EXCEL.EXE">NUL
if "%ERRORLEVEL%"=="0" (
    echo WARNING: Excel is currently running
    echo Please close Excel before continuing to avoid conflicts
    echo.
    choice /C YN /M "Continue anyway? (Y/N)"
    if errorlevel 2 goto :EOF
    echo.
)

REM Set variables
set "SCRIPT_DIR=%~dp0"
set "VBA_FILE=%SCRIPT_DIR%enterprise-excel-addin.vba"
set "ADDIN_NAME=OllamaAI_Enterprise"
set "XLAM_FILE=%SCRIPT_DIR%%ADDIN_NAME%.xlam"
set "TEMP_XLSM=%SCRIPT_DIR%temp_addin.xlsm"

REM Check if VBA file exists
if not exist "%VBA_FILE%" (
    echo ERROR: enterprise-excel-addin.vba not found!
    echo.
    echo Expected location: %VBA_FILE%
    echo.
    echo Please ensure the VBA file is in the same directory as this batch file.
    pause
    goto :EOF
)

echo Files and Directories:
echo    Script Directory: %SCRIPT_DIR%
echo    VBA Source File: %VBA_FILE%
echo    Target Add-in: %XLAM_FILE%
echo.

REM Get user's Excel Add-ins directory
for /f "tokens=3*" %%a in ('reg query "HKCU\Software\Microsoft\Office\16.0\Excel\Options" /v "OPEN" 2^>nul') do set "EXCEL_ADDINS=%%a %%b"
if "%EXCEL_ADDINS%"==" " (
    for /f "tokens=3*" %%a in ('reg query "HKCU\Software\Microsoft\Office\15.0\Excel\Options" /v "OPEN" 2^>nul') do set "EXCEL_ADDINS=%%a %%b"
)
if "%EXCEL_ADDINS%"==" " (
    set "EXCEL_ADDINS=%APPDATA%\Microsoft\AddIns"
)

echo Excel Add-ins Directory: %EXCEL_ADDINS%
echo.

REM Create Excel Add-ins directory if it doesn't exist
if not exist "%EXCEL_ADDINS%" (
    echo Creating Excel Add-ins directory...
    mkdir "%EXCEL_ADDINS%" 2>nul
    if !errorlevel! neq 0 (
        echo ERROR: Could not create Add-ins directory
        pause
        goto :EOF
    )
    echo Directory created successfully
    echo.
)

echo ========================================================================
echo                           DEPLOYMENT STEPS
echo ========================================================================
echo.

REM Step 1: Create PowerShell script to build the add-in (FIXED VERSION)
echo Step 1: Creating PowerShell deployment script (FIXED)...

set "PS_SCRIPT=%SCRIPT_DIR%create_enterprise_addin_fixed.ps1"

REM Create PowerShell script with proper encoding and escaping
(
echo # PowerShell script to create Enterprise Excel Add-in - FIXED VERSION
echo # Generated by deploy-enterprise-excel-addin-fixed.bat
echo.
echo Write-Host "Creating Enterprise Excel Add-in..." -ForegroundColor Green
echo.
echo try {
echo     # Start Excel application
echo     Write-Host "Starting Excel application..." -ForegroundColor Yellow
echo     $excel = New-Object -ComObject Excel.Application
echo     $excel.Visible = $false
echo     $excel.DisplayAlerts = $false
echo.
echo     Write-Host "Excel application started successfully" -ForegroundColor Yellow
echo.
echo     # Create new workbook
echo     Write-Host "Creating new workbook..." -ForegroundColor Yellow
echo     $workbook = $excel.Workbooks.Add^(^)
echo     Write-Host "New workbook created" -ForegroundColor Yellow
echo.
echo     # Access VBA project
echo     Write-Host "Accessing VBA project..." -ForegroundColor Yellow
echo     $vbaProject = $workbook.VBProject
echo.
echo     # Read VBA code from file
echo     Write-Host "Reading VBA code from file..." -ForegroundColor Yellow
echo     $vbaFilePath = "%VBA_FILE%"
echo     if ^(-not ^(Test-Path $vbaFilePath^)^) {
echo         throw "VBA file not found: $vbaFilePath"
echo     }
echo     $vbaCode = Get-Content -Path $vbaFilePath -Raw -Encoding UTF8
echo     Write-Host "VBA code loaded successfully" -ForegroundColor Yellow
echo.
echo     # Add VBA module
echo     Write-Host "Adding VBA module to workbook..." -ForegroundColor Yellow
echo     $module = $vbaProject.VBComponents.Add^(1^)  # 1 = vbext_ct_StdModule
echo     $module.Name = "OllamaAI_Enterprise"
echo     $module.CodeModule.AddFromString^($vbaCode^)
echo     Write-Host "VBA module added successfully" -ForegroundColor Yellow
echo.
echo     # Set workbook properties
echo     Write-Host "Setting workbook properties..." -ForegroundColor Yellow
echo     $workbook.Title = "Ollama AI Enterprise Plugin"
echo     $workbook.Subject = "AI-powered data analysis for Excel - Enterprise Edition"
echo     $workbook.Comments = "Handles millions of records with intelligent processing strategies"
echo.
echo     # Save as Excel Add-in ^(.xlam^)
echo     Write-Host "Saving as Excel Add-in..." -ForegroundColor Yellow
echo     $xlam_path = "%XLAM_FILE%"
echo     $workbook.SaveAs^($xlam_path, 55^)  # 55 = xlAddIn8
echo     Write-Host "Add-in saved successfully to: $xlam_path" -ForegroundColor Green
echo.
echo     # Close workbook and Excel
echo     Write-Host "Closing workbook and Excel..." -ForegroundColor Yellow
echo     $workbook.Close^($false^)
echo     $excel.Quit^(^)
echo.
echo     # Release COM objects
echo     Write-Host "Releasing COM objects..." -ForegroundColor Yellow
echo     [System.Runtime.Interopservices.Marshal]::ReleaseComObject^($workbook^) ^| Out-Null
echo     [System.Runtime.Interopservices.Marshal]::ReleaseComObject^($excel^) ^| Out-Null
echo     [System.GC]::Collect^(^)
echo     [System.GC]::WaitForPendingFinalizers^(^)
echo.
echo     Write-Host "SUCCESS: Enterprise Excel Add-in created successfully!" -ForegroundColor Green
echo     Write-Host "Location: $xlam_path" -ForegroundColor Cyan
echo.
echo } catch {
echo     Write-Host "ERROR: $_" -ForegroundColor Red
echo     Write-Host "Error Details: $^($_.Exception.Message^)" -ForegroundColor Red
echo     if ^($excel^) {
echo         try { 
echo             $excel.Quit^(^) 
echo             Write-Host "Excel application closed" -ForegroundColor Yellow
echo         } catch { 
echo             Write-Host "Could not close Excel application" -ForegroundColor Red
echo         }
echo     }
echo     exit 1
echo }
) > "%PS_SCRIPT%"

echo PowerShell script created successfully
echo.

REM Step 2: Execute PowerShell script with better error handling
echo Step 2: Executing PowerShell script to create add-in...
echo.

REM Try different PowerShell execution methods
echo Attempting to run PowerShell script...
powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "& '%PS_SCRIPT%'"

if %errorlevel% neq 0 (
    echo.
    echo ERROR: PowerShell script failed with exit code %errorlevel%
    echo.
    echo TROUBLESHOOTING STEPS:
    echo 1. Ensure Excel is installed and working
    echo 2. Check if VBA/Macros are enabled in Excel
    echo 3. Try running this batch file as Administrator
    echo 4. Temporarily disable antivirus software
    echo 5. Ensure no other Excel processes are running
    echo.
    echo ALTERNATIVE METHOD:
    echo You can manually create the add-in:
    echo 1. Open Excel
    echo 2. Press Alt+F11 to open VBA Editor
    echo 3. Insert ^> Module
    echo 4. Copy/paste the VBA code from: %VBA_FILE%
    echo 5. File ^> Save As ^> Excel Add-in ^(.xlam^)
    echo.
    pause
    goto :cleanup
)

REM Step 3: Verify add-in was created
echo.
echo Step 3: Verifying add-in creation...

if not exist "%XLAM_FILE%" (
    echo ERROR: Add-in file was not created
    echo Expected location: %XLAM_FILE%
    echo.
    echo The PowerShell script may have failed silently.
    echo Please check the error messages above.
    echo.
    pause
    goto :cleanup
)

echo SUCCESS: Add-in file created successfully
echo File location: %XLAM_FILE%
for %%A in ("%XLAM_FILE%") do echo File size: %%~zA bytes
echo.

REM Step 4: Copy to Excel Add-ins directory
echo Step 4: Installing add-in to Excel Add-ins directory...

set "INSTALLED_ADDIN=%EXCEL_ADDINS%\%ADDIN_NAME%.xlam"

copy "%XLAM_FILE%" "%INSTALLED_ADDIN%" >nul 2>&1
if %errorlevel% neq 0 (
    echo WARNING: Could not copy add-in to Excel directory
    echo Source: %XLAM_FILE%
    echo Target: %INSTALLED_ADDIN%
    echo.
    echo The add-in was created successfully but not installed automatically.
    echo You can manually copy the file later or use it from the current location.
    echo.
) else (
    echo SUCCESS: Add-in installed to Excel Add-ins directory
    echo Installation location: %INSTALLED_ADDIN%
    echo.
)

REM Step 5: Create simple configuration instructions
echo Step 5: Creating setup instructions...

set "SETUP_TXT=%SCRIPT_DIR%ENTERPRISE_SETUP_INSTRUCTIONS.txt"

(
echo ========================================================================
echo                    ENTERPRISE EXCEL ADD-IN SETUP INSTRUCTIONS
echo ========================================================================
echo.
echo CONGRATULATIONS! Your Enterprise Excel Add-in has been created successfully.
echo.
echo ADD-IN LOCATION:
echo %XLAM_FILE%
echo.
echo NEXT STEPS TO ENABLE THE ADD-IN:
echo.
echo 1. ENABLE THE ADD-IN IN EXCEL:
echo    - Open Microsoft Excel
echo    - Go to File ^> Options ^> Add-ins
echo    - At the bottom, select "Excel Add-ins" from dropdown and click "Go..."
echo    - Click "Browse..." button
echo    - Navigate to and select: %XLAM_FILE%
echo    - Check the box next to "OllamaAI_Enterprise" and click OK
echo.
echo 2. CONFIGURE YOUR OLLAMA SERVER:
echo    - In Excel, press Alt+F8 to open Macro dialog
echo    - Type: ConfigureOllamaServer
echo    - Click Run
echo    - Enter your EC2 server URL: http://YOUR-EC2-IP:11434
echo.
echo 3. TEST THE CONNECTION:
echo    - Press Alt+F8 again
echo    - Type: TestConnection
echo    - Click Run
echo    - Should show "Connection successful!"
echo.
echo 4. TEST WITH SAMPLE DATA:
echo    - Press Alt+F8 again
echo    - Type: TestWithSampleData
echo    - Click Run
echo    - Verify AI responses work correctly
echo.
echo 5. ANALYZE YOUR DATA:
echo    - Select your data range ^(including headers^)
echo    - Press Alt+F8
echo    - Type: AnalyzeSelectedDataEnterprise
echo    - Click Run
echo.
echo ENTERPRISE FUNCTIONS AVAILABLE:
echo - AnalyzeSelectedDataEnterprise    ^(Smart analysis for any dataset size^)
echo - AskQuestionAboutDataEnterprise   ^(Intelligent Q^&A with sampling^)
echo - GenerateStatisticalSummary       ^(Fast statistics on millions of rows^)
echo - TestConnection                   ^(Verify Ollama server connection^)
echo - TestWithSampleData               ^(Test functionality with sample data^)
echo - ConfigureOllamaServer            ^(Set up your server settings^)
echo - ShowEnterpriseHelp               ^(Show detailed help information^)
echo.
echo PROCESSING CAPABILITIES:
echo - ^< 100 rows: Full analysis ^(5-10 seconds^)
echo - ^< 1K rows: Intelligent sampling ^(10-15 seconds^)
echo - ^< 100K rows: Statistical analysis ^(30-60 seconds^)
echo - ^> 100K rows: Chunked processing ^(1-3 minutes^)
echo.
echo PERFORMANCE TIPS:
echo - Start with GenerateStatisticalSummary for very large datasets
echo - Select only the columns you need for analysis
echo - Ensure you have 8GB+ RAM for optimal performance with large datasets
echo - Close other applications during processing of very large datasets
echo.
echo TROUBLESHOOTING:
echo - If functions don't appear, ensure the add-in is enabled in Excel
echo - If you get connection errors, verify your Ollama server is running
echo - If you get memory errors, try selecting smaller data ranges
echo - For datasets over 1 million rows, use GenerateStatisticalSummary first
echo.
echo ========================================================================
) > "%SETUP_TXT%"

echo Setup instructions created: %SETUP_TXT%
echo.

REM Success message
echo ========================================================================
echo                           DEPLOYMENT COMPLETED SUCCESSFULLY!
echo ========================================================================
echo.
echo SUCCESS: ENTERPRISE EXCEL ADD-IN DEPLOYED!
echo.
echo FILES CREATED:
echo - Add-in file: %XLAM_FILE%
if exist "%INSTALLED_ADDIN%" (
    echo - Installed to: %INSTALLED_ADDIN%
)
echo - Setup instructions: %SETUP_TXT%
echo.
echo ENTERPRISE FEATURES READY:
echo - Handles millions of records safely
echo - Intelligent sampling algorithms
echo - Memory-efficient processing  
echo - Statistical analysis on massive datasets
echo - Chunked processing for extreme scale
echo.
echo PROCESSING STRATEGIES AVAILABLE:
echo - ^< 100 rows: Full analysis ^(5-10 seconds^)
echo - ^< 1K rows: Intelligent sampling ^(10-15 seconds^)
echo - ^< 100K rows: Statistical analysis ^(30-60 seconds^)
echo - ^> 100K rows: Chunked processing ^(1-3 minutes^)
echo.
echo NEXT STEPS:
echo 1. Open the setup instructions: %SETUP_TXT%
echo 2. Follow the steps to enable the add-in in Excel
echo 3. Configure your Ollama server URL
echo 4. Test with sample data
echo 5. Start analyzing your enterprise datasets!
echo.
echo QUICK START IN EXCEL:
echo - Press Alt+F8, type: ConfigureOllamaServer
echo - Press Alt+F8, type: TestConnection  
echo - Press Alt+F8, type: ShowEnterpriseHelp
echo.
echo ========================================================================

:cleanup
REM Clean up temporary files
if exist "%PS_SCRIPT%" del "%PS_SCRIPT%" >nul 2>&1

echo.
echo Opening setup instructions...
if exist "%SETUP_TXT%" (
    start notepad "%SETUP_TXT%"
)

echo.
echo Deployment script completed.
echo Press any key to exit...
pause >nul